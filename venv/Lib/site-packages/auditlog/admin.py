from django.contrib import admin, messages
from .models import LogEntry
from .mixins import LogEntryAdminMixin
from .filters import ResourceTypeFilter


class LogEntryAdmin(admin.ModelAdmin, LogEntryAdminMixin):
    list_display = ['created', 'resource_url', 'action', 'msg_short', 'user_url']
    search_fields = ['timestamp', 'object_repr', 'changes', 'actor__username']
    list_filter = ['action', ResourceTypeFilter]
    readonly_fields = ['created', 'resource_url', 'action', 'user_url', 'msg']
    fieldsets = [
        (None, {'fields': ['created', 'user_url', 'resource_url']}),
        ('Modificações', {'fields': ['action', 'msg']}),
    ]

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False

    # def has_delete_permission(self, request, obj=None):
    #     return False

    def save_model(self, request, obj, form, change):
        actioname = form.cleaned_data["action"]
        if actioname == '':
            messages.info("Essa operação não pode ser realizada!!!")
        super().save_model(request, obj, form, change)

    # def save_model(self, request, obj, form, change):
    #     try:
    #         if obj==None:
    #             messages.info("Nao pode salvar")
    #             # requisitante = Requisitante.objects.get(id_user=request.user.pk)
    #             # obj.solicitante = requisitante
    #             # obj.chave_anonimo = requisitante.chave_identificacao
    #             # obj.longitude = request.POST.get('codigo_longitude') or None
    #             # obj.lagitude = request.POST.get('codigo_latitude') or None
    #             obj.action = 1
    #             obj.save()
    #     except:
    #         messages.info("Nao pode salvar")



admin.site.register(LogEntry, LogEntryAdmin)
